---
# Linux/Instala_EDR.yml
# Bootstrap sin facts/ansible_os_family, fija Python3, limita a 5 min, evita bloqueos,
# descarga SOLO el instalador y ejecuta con sudo NOPASSWD.

- name: Instalar agente con usuario dedicado (solo instalador, robusto)
  hosts: all
  become: true
  gather_facts: false          # <- no facts hasta tener python3

  vars:
    ansible_python_interpreter: /usr/bin/python3
    installer_raw_url: "https://raw.githubusercontent.com/acuetosantillana/Playbooks/main/Instaladores/installScript.sh"
    install_script_abs: "/home/admendpoint/installScript.sh"
    install_args: "install"
    install_timeout: 300       # 5 minutos
    poll_delay: 5
    poll_retries: 60           # 60 * 5s = 300s

  pre_tasks:
    - name: Bootstrap python3 en remoto (sin depender de Python / sin facts)
      ansible.builtin.raw: |
        set -o pipefail
        if ! command -v python3 >/dev/null 2>&1; then
          if command -v apt-get >/dev/null 2>&1; then
            apt-get update -y && apt-get install -y python3
          elif command -v yum >/dev/null 2>&1; then
            yum -y install python3
          elif command -v dnf >/dev/null 2>&1; then
            dnf -y install python3
          elif command -v zypper >/dev/null 2>&1; then
            zypper --non-interactive install -y python3 || zypper --non-interactive in -y python3
          else
            echo "No se pudo instalar python3 automáticamente" >&2
            exit 1
          fi
        fi
      changed_when: false

    - name: Bootstrap sudo si faltara (sin facts)
      ansible.builtin.raw: |
        set -o pipefail
        if ! command -v sudo >/dev/null 2>&1; then
          if command -v apt-get >/dev/null 2>&1; then
            apt-get update -y && apt-get install -y sudo
          elif command -v yum >/dev/null 2>&1; then
            yum -y install sudo
          elif command -v dnf >/dev/null 2>&1; then
            dnf -y install sudo
          elif command -v zypper >/dev/null 2>&1; then
            zypper --non-interactive install -y sudo || zypper --non-interactive in -y sudo
          fi
        fi
      changed_when: false

    - name: Recolectar facts (ya hay python3)
      ansible.builtin.setup:

  tasks:
    - name: Crear usuario admendpoint con home y shell
      ansible.builtin.user:
        name: admendpoint
        shell: /bin/bash
        create_home: yes
        home: /home/admendpoint

    - name: Asegurar permisos del home
      ansible.builtin.file:
        path: /home/admendpoint
        owner: admendpoint
        group: admendpoint
        mode: "0750"
        state: directory

    - name: Descargar SOLO el instalador desde GitHub (sin clonar repo)
      ansible.builtin.get_url:
        url: "{{ installer_raw_url }}"
        dest: "{{ install_script_abs }}"
        owner: admendpoint
        group: admendpoint
        mode: "0750"
        force: yes
        validate_certs: yes

    - name: Publicar sudoers para admendpoint (NOPASSWD + env_keep)
      ansible.builtin.copy:
        dest: /etc/sudoers.d/admendpoint
        mode: "0440"
        owner: root
        group: root
        content: |
          # Permisos específicos para el usuario admendpoint
          Defaults:admendpoint !requiretty
          # Conservar env para evitar bloqueos por pager/colores y pasar proxies si aplica
          Defaults:admendpoint env_keep += "SYSTEMD_PAGER SYSTEMD_COLORS LANG LC_ALL http_proxy https_proxy no_proxy"

          admendpoint     ALL=(root)      NOPASSWD: \
            /home/admendpoint/installScript.sh, \
            /usr/bin/vi /etc/systemd/system/cpla.service, \
            /usr/bin/systemctl start cpla.service, \
            /usr/bin/systemctl stop cpla.service, \
            /usr/bin/systemctl status cpla.service, \
            /usr/bin/systemctl restart cpla.service, \
            /usr/bin/systemctl daemon-reload, \
            /usr/bin/sh -x /home/admendpoint/installScript.sh install
        validate: '/usr/sbin/visudo -cf %s'

    # Idempotencia: si ya existe la unidad, no relanzar instalador
    - name: Verificar si ya existe la unidad de systemd cpla
      ansible.builtin.stat:
        path: /etc/systemd/system/cpla.service
      register: cpla_unit

    - name: Lanzar instalador (async, no interactivo, con log)
      become: false
      become_user: admendpoint
      environment:
        SYSTEMD_PAGER: cat
        SYSTEMD_COLORS: "0"
        LANG: C
        LC_ALL: C
      args:
        chdir: "{{ (install_script_abs | dirname) }}"
        executable: /bin/bash
      ansible.builtin.shell: |
        set -o pipefail
        LOG="{{ (install_script_abs | dirname) }}/install.log"
        : > "$LOG"
        timeout {{ install_timeout }} sudo -n -E /usr/bin/sh -x "{{ install_script_abs }}" {{ install_args }} </dev/null >>"$LOG" 2>&1
      async: 3600
      poll: 0
      register: install_job
      when: not cpla_unit.stat.exists

    - name: Esperar término del instalador (poll cada 5s, máx 5 min)
      ansible.builtin.async_status:
        jid: "{{ install_job.ansible_job_id }}"
      register: install_status
      until: install_status.finished
      retries: "{{ poll_retries }}"
      delay: "{{ poll_delay }}"
      when: not cpla_unit.stat.exists

    - name: Mostrar últimas 200 líneas del log de instalación
      become: false
      become_user: admendpoint
      args:
        chdir: "{{ (install_script_abs | dirname) }}"
        executable: /bin/bash
      ansible.builtin.shell: |
        test -f install.log && tail -n 200 install.log || echo "No existe install.log"
      register: tail_log
      changed_when: false
      failed_when: false
      when: not cpla_unit.stat.exists

    - name: Log de instalación (tail)
      ansible.builtin.debug:
        msg: "{{ tail_log.stdout }}"
      when: not cpla_unit.stat.exists

    - name: Fallar si el instalador devolvió error
      ansible.builtin.fail:
        msg: "Instalador falló con rc={{ install_status.rc }}. Revisa /home/admendpoint/install.log"
      when:
        - not cpla_unit.stat.exists
        - install_status.rc is defined
        - install_status.rc | int != 0

    - name: systemd daemon-reload si existe la unidad cpla
      ansible.builtin.shell: systemctl daemon-reload
      changed_when: false
      when: cpla_unit.stat.exists

    - name: (Opcional) arrancar servicio cpla si existe
      ansible.builtin.shell: systemctl start cpla.service
      changed_when: false
      when: cpla_unit.stat.exists
